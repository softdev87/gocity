// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import time "time"

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *Cache) Get(key string) (bool, []byte) {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(string) []byte); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	return r0, r1
}

// GetSet provides a mock function with given fields: key, set, TTL
func (_m *Cache) GetSet(key string, set func() ([]byte, error), TTL time.Duration) ([]byte, error) {
	ret := _m.Called(key, set, TTL)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, func() ([]byte, error), time.Duration) []byte); ok {
		r0 = rf(key, set, TTL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, func() ([]byte, error), time.Duration) error); ok {
		r1 = rf(key, set, TTL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value, TTL
func (_m *Cache) Set(key string, value []byte, TTL time.Duration) {
	_m.Called(key, value, TTL)
}
